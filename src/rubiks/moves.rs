use super::*;
use rubiks_rs::definitions as def;

#[rustfmt::skip]
pub const CORNER_MOVES: [def::Array<CORNERS, TWISTS>; MOVE_COUNT] = [
    def::Array::new([(3, 0), (0, 0), (1, 0), (2, 0), (4, 0), (5, 0), (6, 0), (7, 0)]), // U
    def::Array::new([(2, 0), (3, 0), (0, 0), (1, 0), (4, 0), (5, 0), (6, 0), (7, 0)]), // U2
    def::Array::new([(1, 0), (2, 0), (3, 0), (0, 0), (4, 0), (5, 0), (6, 0), (7, 0)]), // U'
    def::Array::new([(4, 2), (1, 0), (2, 0), (0, 1), (7, 1), (5, 0), (6, 0), (3, 2)]), // R
    def::Array::new([(7, 0), (1, 0), (2, 0), (4, 0), (3, 0), (5, 0), (6, 0), (0, 0)]), // R2
    def::Array::new([(3, 2), (1, 0), (2, 0), (7, 1), (0, 1), (5, 0), (6, 0), (4, 2)]), // R'
    def::Array::new([(1, 1), (5, 2), (2, 0), (3, 0), (0, 2), (4, 1), (6, 0), (7, 0)]), // F
    def::Array::new([(5, 0), (4, 0), (2, 0), (3, 0), (1, 0), (0, 0), (6, 0), (7, 0)]), // F2
    def::Array::new([(4, 1), (0, 2), (2, 0), (3, 0), (5, 2), (1, 1), (6, 0), (7, 0)]), // F'
    def::Array::new([(0, 0), (2, 1), (6, 2), (3, 0), (4, 0), (1, 2), (5, 1), (7, 0)]), // L
    def::Array::new([(0, 0), (6, 0), (5, 0), (3, 0), (4, 0), (2, 0), (1, 0), (7, 0)]), // L2
    def::Array::new([(0, 0), (5, 1), (1, 2), (3, 0), (4, 0), (6, 2), (2, 1), (7, 0)]), // L'
    def::Array::new([(0, 0), (1, 0), (2, 0), (3, 0), (5, 0), (6, 0), (7, 0), (4, 0)]), // D
    def::Array::new([(0, 0), (1, 0), (2, 0), (3, 0), (6, 0), (7, 0), (4, 0), (5, 0)]), // D2
    def::Array::new([(0, 0), (1, 0), (2, 0), (3, 0), (7, 0), (4, 0), (5, 0), (6, 0)]), // D'
    def::Array::new([(0, 0), (1, 0), (3, 1), (7, 2), (4, 0), (5, 0), (2, 2), (6, 1)]), // B
    def::Array::new([(0, 0), (1, 0), (7, 0), (6, 0), (4, 0), (5, 0), (3, 0), (2, 0)]), // B2
    def::Array::new([(0, 0), (1, 0), (6, 1), (2, 2), (4, 0), (5, 0), (7, 2), (3, 1)]), // B'
];

#[rustfmt::skip]
pub const EDGE_MOVES: [def::Array<EDGES, FLIPS>; MOVE_COUNT] = [
    def::Array::new([(3, 0), (0, 0), (1, 0), (2, 0), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0), (9, 0), (10, 0), (11, 0)]), // U
    def::Array::new([(2, 0), (3, 0), (0, 0), (1, 0), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0), (9, 0), (10, 0), (11, 0)]), // U2
    def::Array::new([(1, 0), (2, 0), (3, 0), (0, 0), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0), (9, 0), (10, 0), (11, 0)]), // U'
    def::Array::new([(8, 0), (1, 0), (2, 0), (3, 0), (11, 0), (5, 0), (6, 0), (7, 0), (4, 0), (9, 0), (10, 0), (0, 0)]), // R
    def::Array::new([(4, 0), (1, 0), (2, 0), (3, 0), (0, 0), (5, 0), (6, 0), (7, 0), (11, 0), (9, 0), (10, 0), (8, 0)]), // R2
    def::Array::new([(11, 0), (1, 0), (2, 0), (3, 0), (8, 0), (5, 0), (6, 0), (7, 0), (0, 0), (9, 0), (10, 0), (4, 0)]), // R'
    def::Array::new([(0, 0), (9, 1), (2, 0), (3, 0), (4, 0), (8, 1), (6, 0), (7, 0), (1, 1), (5, 1), (10, 0), (11, 0)]), // F
    def::Array::new([(0, 0), (5, 0), (2, 0), (3, 0), (4, 0), (1, 0), (6, 0), (7, 0), (9, 0), (8, 0), (10, 0), (11, 0)]), // F2
    def::Array::new([(0, 0), (8, 1), (2, 0), (3, 0), (4, 0), (9, 1), (6, 0), (7, 0), (5, 1), (1, 1), (10, 0), (11, 0)]), // F'
    def::Array::new([(0, 0), (1, 0), (10, 0), (3, 0), (4, 0), (5, 0), (9, 0), (7, 0), (8, 0), (2, 0), (6, 0), (11, 0)]), // L
    def::Array::new([(0, 0), (1, 0), (6, 0), (3, 0), (4, 0), (5, 0), (2, 0), (7, 0), (8, 0), (10, 0), (9, 0), (11, 0)]), // L2
    def::Array::new([(0, 0), (1, 0), (9, 0), (3, 0), (4, 0), (5, 0), (10, 0), (7, 0), (8, 0), (6, 0), (2, 0), (11, 0)]), // L'
    def::Array::new([(0, 0), (1, 0), (2, 0), (3, 0), (5, 0), (6, 0), (7, 0), (4, 0), (8, 0), (9, 0), (10, 0), (11, 0)]), // D
    def::Array::new([(0, 0), (1, 0), (2, 0), (3, 0), (6, 0), (7, 0), (4, 0), (5, 0), (8, 0), (9, 0), (10, 0), (11, 0)]), // D2
    def::Array::new([(0, 0), (1, 0), (2, 0), (3, 0), (7, 0), (4, 0), (5, 0), (6, 0), (8, 0), (9, 0), (10, 0), (11, 0)]), // D'
    def::Array::new([(0, 0), (1, 0), (2, 0), (11, 1), (4, 0), (5, 0), (6, 0), (10, 1), (8, 0), (9, 0), (3, 1), (7, 1)]), // B
    def::Array::new([(0, 0), (1, 0), (2, 0), (7, 0), (4, 0), (5, 0), (6, 0), (3, 0), (8, 0), (9, 0), (11, 0), (10, 0)]), // B2
    def::Array::new([(0, 0), (1, 0), (2, 0), (10, 1), (4, 0), (5, 0), (6, 0), (11, 1), (8, 0), (9, 0), (7, 1), (3, 1)]), // B'
];
