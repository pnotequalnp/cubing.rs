use super::{Corners, Edges, Htm};

impl Htm {
    #[rustfmt::skip]
    pub const CORNER_MOVES: [Corners; Htm::COUNT] = [
        Corners::new([(3, 0), (0, 0), (1, 0), (2, 0), (4, 0), (5, 0), (6, 0), (7, 0)]), // U
        Corners::new([(2, 0), (3, 0), (0, 0), (1, 0), (4, 0), (5, 0), (6, 0), (7, 0)]), // U2
        Corners::new([(1, 0), (2, 0), (3, 0), (0, 0), (4, 0), (5, 0), (6, 0), (7, 0)]), // U'
        Corners::new([(4, 2), (1, 0), (2, 0), (0, 1), (7, 1), (5, 0), (6, 0), (3, 2)]), // R
        Corners::new([(7, 0), (1, 0), (2, 0), (4, 0), (3, 0), (5, 0), (6, 0), (0, 0)]), // R2
        Corners::new([(3, 2), (1, 0), (2, 0), (7, 1), (0, 1), (5, 0), (6, 0), (4, 2)]), // R'
        Corners::new([(1, 1), (5, 2), (2, 0), (3, 0), (0, 2), (4, 1), (6, 0), (7, 0)]), // F
        Corners::new([(5, 0), (4, 0), (2, 0), (3, 0), (1, 0), (0, 0), (6, 0), (7, 0)]), // F2
        Corners::new([(4, 1), (0, 2), (2, 0), (3, 0), (5, 2), (1, 1), (6, 0), (7, 0)]), // F'
        Corners::new([(0, 0), (2, 1), (6, 2), (3, 0), (4, 0), (1, 2), (5, 1), (7, 0)]), // L
        Corners::new([(0, 0), (6, 0), (5, 0), (3, 0), (4, 0), (2, 0), (1, 0), (7, 0)]), // L2
        Corners::new([(0, 0), (5, 1), (1, 2), (3, 0), (4, 0), (6, 2), (2, 1), (7, 0)]), // L'
        Corners::new([(0, 0), (1, 0), (2, 0), (3, 0), (5, 0), (6, 0), (7, 0), (4, 0)]), // D
        Corners::new([(0, 0), (1, 0), (2, 0), (3, 0), (6, 0), (7, 0), (4, 0), (5, 0)]), // D2
        Corners::new([(0, 0), (1, 0), (2, 0), (3, 0), (7, 0), (4, 0), (5, 0), (6, 0)]), // D'
        Corners::new([(0, 0), (1, 0), (3, 1), (7, 2), (4, 0), (5, 0), (2, 2), (6, 1)]), // B
        Corners::new([(0, 0), (1, 0), (7, 0), (6, 0), (4, 0), (5, 0), (3, 0), (2, 0)]), // B2
        Corners::new([(0, 0), (1, 0), (6, 1), (2, 2), (4, 0), (5, 0), (7, 2), (3, 1)]), // B'
    ];

    #[rustfmt::skip]
    pub const EDGE_MOVES: [Edges; Htm::COUNT] = [
        Edges::new([(3, 0), (0, 0), (1, 0), (2, 0), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0), (9, 0), (10, 0), (11, 0)]), // U
        Edges::new([(2, 0), (3, 0), (0, 0), (1, 0), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0), (9, 0), (10, 0), (11, 0)]), // U2
        Edges::new([(1, 0), (2, 0), (3, 0), (0, 0), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0), (9, 0), (10, 0), (11, 0)]), // U'
        Edges::new([(8, 0), (1, 0), (2, 0), (3, 0), (11, 0), (5, 0), (6, 0), (7, 0), (4, 0), (9, 0), (10, 0), (0, 0)]), // R
        Edges::new([(4, 0), (1, 0), (2, 0), (3, 0), (0, 0), (5, 0), (6, 0), (7, 0), (11, 0), (9, 0), (10, 0), (8, 0)]), // R2
        Edges::new([(11, 0), (1, 0), (2, 0), (3, 0), (8, 0), (5, 0), (6, 0), (7, 0), (0, 0), (9, 0), (10, 0), (4, 0)]), // R'
        Edges::new([(0, 0), (9, 1), (2, 0), (3, 0), (4, 0), (8, 1), (6, 0), (7, 0), (1, 1), (5, 1), (10, 0), (11, 0)]), // F
        Edges::new([(0, 0), (5, 0), (2, 0), (3, 0), (4, 0), (1, 0), (6, 0), (7, 0), (9, 0), (8, 0), (10, 0), (11, 0)]), // F2
        Edges::new([(0, 0), (8, 1), (2, 0), (3, 0), (4, 0), (9, 1), (6, 0), (7, 0), (5, 1), (1, 1), (10, 0), (11, 0)]), // F'
        Edges::new([(0, 0), (1, 0), (10, 0), (3, 0), (4, 0), (5, 0), (9, 0), (7, 0), (8, 0), (2, 0), (6, 0), (11, 0)]), // L
        Edges::new([(0, 0), (1, 0), (6, 0), (3, 0), (4, 0), (5, 0), (2, 0), (7, 0), (8, 0), (10, 0), (9, 0), (11, 0)]), // L2
        Edges::new([(0, 0), (1, 0), (9, 0), (3, 0), (4, 0), (5, 0), (10, 0), (7, 0), (8, 0), (6, 0), (2, 0), (11, 0)]), // L'
        Edges::new([(0, 0), (1, 0), (2, 0), (3, 0), (5, 0), (6, 0), (7, 0), (4, 0), (8, 0), (9, 0), (10, 0), (11, 0)]), // D
        Edges::new([(0, 0), (1, 0), (2, 0), (3, 0), (6, 0), (7, 0), (4, 0), (5, 0), (8, 0), (9, 0), (10, 0), (11, 0)]), // D2
        Edges::new([(0, 0), (1, 0), (2, 0), (3, 0), (7, 0), (4, 0), (5, 0), (6, 0), (8, 0), (9, 0), (10, 0), (11, 0)]), // D'
        Edges::new([(0, 0), (1, 0), (2, 0), (11, 1), (4, 0), (5, 0), (6, 0), (10, 1), (8, 0), (9, 0), (3, 1), (7, 1)]), // B
        Edges::new([(0, 0), (1, 0), (2, 0), (7, 0), (4, 0), (5, 0), (6, 0), (3, 0), (8, 0), (9, 0), (11, 0), (10, 0)]), // B2
        Edges::new([(0, 0), (1, 0), (2, 0), (10, 1), (4, 0), (5, 0), (6, 0), (11, 1), (8, 0), (9, 0), (7, 1), (3, 1)]), // B'
];
}
