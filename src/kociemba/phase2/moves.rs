use super::*;
use cube::definitions as def;

#[rustfmt::skip]
pub const CORNER_MOVES: [def::Array<CORNERS, 1>; MOVE_COUNT] = [
    def::Array::new([(3, 0), (0, 0), (1, 0), (2, 0), (4, 0), (5, 0), (6, 0), (7, 0)]), // U
    def::Array::new([(2, 0), (3, 0), (0, 0), (1, 0), (4, 0), (5, 0), (6, 0), (7, 0)]), // U2
    def::Array::new([(1, 0), (2, 0), (3, 0), (0, 0), (4, 0), (5, 0), (6, 0), (7, 0)]), // U'
    def::Array::new([(0, 0), (1, 0), (2, 0), (3, 0), (5, 0), (6, 0), (7, 0), (4, 0)]), // D
    def::Array::new([(0, 0), (1, 0), (2, 0), (3, 0), (6, 0), (7, 0), (4, 0), (5, 0)]), // D2
    def::Array::new([(0, 0), (1, 0), (2, 0), (3, 0), (7, 0), (4, 0), (5, 0), (6, 0)]), // D'
    def::Array::new([(7, 0), (1, 0), (2, 0), (4, 0), (3, 0), (5, 0), (6, 0), (0, 0)]), // R2
    def::Array::new([(5, 0), (4, 0), (2, 0), (3, 0), (1, 0), (0, 0), (6, 0), (7, 0)]), // F2
    def::Array::new([(0, 0), (6, 0), (5, 0), (3, 0), (4, 0), (2, 0), (1, 0), (7, 0)]), // L2
    def::Array::new([(0, 0), (1, 0), (7, 0), (6, 0), (4, 0), (5, 0), (3, 0), (2, 0)]), // B2
];

#[rustfmt::skip]
pub const SLICE_MOVES: [def::Array<SLICE_EDGES, 1>; MOVE_COUNT] = [
    def::Array::new([(0, 0), (1, 0), (2, 0), (3, 0)]), // U
    def::Array::new([(0, 0), (1, 0), (2, 0), (3, 0)]), // U2
    def::Array::new([(0, 0), (1, 0), (2, 0), (3, 0)]), // U'
    def::Array::new([(0, 0), (1, 0), (2, 0), (3, 0)]), // D
    def::Array::new([(0, 0), (1, 0), (2, 0), (3, 0)]), // D2
    def::Array::new([(0, 0), (1, 0), (2, 0), (3, 0)]), // D'
    def::Array::new([(3, 0), (1, 0), (2, 0), (0, 0)]), // R2
    def::Array::new([(1, 0), (0, 0), (2, 0), (3, 0)]), // F2
    def::Array::new([(0, 0), (2, 0), (1, 0), (3, 0)]), // L2
    def::Array::new([(0, 0), (1, 0), (3, 0), (2, 0)]), // B2
];

#[rustfmt::skip]
pub const EDGE_MOVES: [def::Array<EDGES, 1>; MOVE_COUNT] = [
    def::Array::new([(3, 0), (0, 0), (1, 0), (2, 0), (4, 0), (5, 0), (6, 0), (7, 0)]), // U
    def::Array::new([(2, 0), (3, 0), (0, 0), (1, 0), (4, 0), (5, 0), (6, 0), (7, 0)]), // U2
    def::Array::new([(1, 0), (2, 0), (3, 0), (0, 0), (4, 0), (5, 0), (6, 0), (7, 0)]), // U'
    def::Array::new([(0, 0), (1, 0), (2, 0), (3, 0), (5, 0), (6, 0), (7, 0), (4, 0)]), // D
    def::Array::new([(0, 0), (1, 0), (2, 0), (3, 0), (6, 0), (7, 0), (4, 0), (5, 0)]), // D2
    def::Array::new([(0, 0), (1, 0), (2, 0), (3, 0), (7, 0), (4, 0), (5, 0), (6, 0)]), // D'
    def::Array::new([(4, 0), (1, 0), (2, 0), (3, 0), (0, 0), (5, 0), (6, 0), (7, 0)]), // R2
    def::Array::new([(0, 0), (5, 0), (2, 0), (3, 0), (4, 0), (1, 0), (6, 0), (7, 0)]), // F2
    def::Array::new([(0, 0), (1, 0), (6, 0), (3, 0), (4, 0), (5, 0), (2, 0), (7, 0)]), // L2
    def::Array::new([(0, 0), (1, 0), (2, 0), (7, 0), (4, 0), (5, 0), (6, 0), (3, 0)]), // B2
];
